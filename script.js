// Fonction pour animer le d√©filement fluide vers les sections
document.querySelectorAll('nav ul li a').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault(); // Emp√™che le comportement par d√©faut du lien
        const targetId = this.getAttribute('href').substring(1); // R√©cup√®re l'ID de la cible
        const targetSection = document.getElementById(targetId); // R√©cup√®re la section cible

        // D√©filement fluide vers la section cible
        targetSection.scrollIntoView({
            behavior: 'smooth', // D√©filement fluide
            block: 'start' // Alignement en haut de la section
        });
    });
});

// Fonction pour animer les √©l√©ments au d√©filement
function animateOnScroll() {
    const sections = document.querySelectorAll('section');
    sections.forEach(section => {
        const sectionTop = section.getBoundingClientRect().top;
        const sectionBottom = section.getBoundingClientRect().bottom;

        // Si la section est visible √† l'√©cran
        if (sectionTop < window.innerHeight && sectionBottom > 0) {
            section.style.opacity = '1';
            section.style.transform = 'translateY(0)';
        } else {
            section.style.opacity = '0';
            section.style.transform = 'translateY(50px)';
        }
    });
}

// Ajoute un √©couteur d'√©v√©nement pour le d√©filement
window.addEventListener('scroll', animateOnScroll);

// Applique l'animation au chargement de la page
document.addEventListener('DOMContentLoaded', () => {
    animateOnScroll(); // Anime les sections visibles au chargement
});

// Fonction pour ajouter un effet de parallaxe √† la section Hero
function parallaxEffect() {
    const hero = document.querySelector('.hero');
    const scrollPosition = window.pageYOffset;

    // D√©place l'arri√®re-plan de la section Hero en fonction du d√©filement
    hero.style.backgroundPositionY = `${scrollPosition * 0.5}px`;
}

// Ajoute un √©couteur d'√©v√©nement pour l'effet de parallaxe
window.addEventListener('scroll', parallaxEffect);

// Fonction pour afficher un message de bienvenue dans la console
console.log('Bienvenue sur le portfolio de Nielsenvideo ! üé•‚ú®');

// Fonction pour g√©rer le clic sur les vid√©os
document.querySelectorAll('.gallery-item video').forEach(video => {
    video.addEventListener('click', function () {
        if (video.paused) {
            video.play(); // Joue la vid√©o si elle est en pause
        } else {
            video.pause(); // Met en pause la vid√©o si elle est en lecture
        }
    });
});

// Fonction pour afficher une alerte lors du clic sur le bouton CTA
document.querySelector('.cta-button').addEventListener('click', function (e) {
    e.preventDefault(); // Emp√™che le comportement par d√©faut du bouton
    alert('Vous allez √™tre redirig√© vers mes r√©alisations ! üöÄ');
});

// Fonction pour ajouter un effet de survol sur les ic√¥nes des r√©seaux sociaux
document.querySelectorAll('.social-links a').forEach(icon => {
    icon.addEventListener('mouseenter', function () {
        this.style.transform = 'scale(1.2)'; // Agrandit l'ic√¥ne au survol
    });

    icon.addEventListener('mouseleave', function () {
        this.style.transform = 'scale(1)'; // R√©initialise la taille de l'ic√¥ne
    });
});